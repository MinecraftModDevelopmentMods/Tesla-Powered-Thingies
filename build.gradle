buildscript {
    ext.kotlin_version = project.kotlin_version
    repositories {
        mavenCentral()
        maven { url = "http://files.minecraftforge.net/maven" }
        maven { url = "http://repo.maven.apache.org/maven2" }
        maven { url = "https://oss.sonatype.org/content/repositories/snapshots/" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${project.kotlin_version}"
    }
}
apply plugin: "net.minecraftforge.gradle.forge"
apply plugin: 'kotlin'
apply plugin: "maven-publish"
apply plugin: "maven"

archivesBaseName = project.mod_name.replace(' ', '-').toLowerCase()
group = "net.ndrei"

version = "${project.minecraft_version}-${project.mod_version}"
if (project.hasProperty('mod_suffix')) {
    version += "-${project.mod_suffix}"
}

compileJava { sourceCompatibility = targetCompatibility = "1.8" }
compileKotlin { kotlinOptions { jvmTarget = "1.8" } }

minecraft {
    version = "${project.minecraft_version}-${project.forge_version}"
    mappings = "${project.mcp_version}"
    runDir = "run"

    replace '@MOD-ID@', project.mod_id
    replace '@MOD-NAME@', project.mod_name
    replace '@MOD-VERSION@', project.mod_version
    replace '@MOD-MC-VERSION@', project.minecraft_version
    replace '@FORGELIN-VERSION@', project.forgelin_version
    replace '@FORGE-VERSION@', project.forge_version
    replace '@TESLA-CORE-LIB-VERSION@', project.teslacorelib_version

    replaceIn 'constants.kt'
}

// Mad hacks to make source replacements work for Kotlin
// "stolen" from: https://github.com/PaleoCrafter/VanillaImmersion/blob/ee82ecafb76659cf7d7822a722c8f63f43f41d01/build.gradle#L119-L136
import net.minecraftforge.gradle.user.TaskSourceCopy
for (set in sourceSets) {
    def taskName = "source${set.name.capitalize()}Kotlin"
    def dir = new File(project.getBuildDir(), "sources/${set.name}/kotlin")
    task(taskName, type: TaskSourceCopy) {
        source = set.getKotlin()
        output = dir
    }
    def compileTask = tasks[set.getCompileTaskName("kotlin")]
    compileTask.source = dir
    compileTask.dependsOn taskName
    def dirPath = dir.toPath()
    compileTask.include {
        return it.file.toPath().startsWith(dirPath)
    }
}
// end of "stolen" part :)

configurations {
    compile.extendsFrom exportedCompile
    deployerJars

    all { resolutionStrategy.cacheChangingModulesFor 0, 'seconds' }
}

repositories {
    mavenCentral()
    mavenLocal()
    jcenter()
    maven { name='mine'; url='http://maven.ndrei.net' }
    maven { name='forgelin'; url='http://maven.shadowfacts.net/' }

    maven { name='jei'; url="http://dvs1.progwml6.com/files/maven" }
    maven { name="ct2"; url="http://maven.blamejared.com" }
}

dependencies {
    deployerJars 'org.apache.maven.wagon:wagon-ftp:2.2'
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:${project.kotlin_version}"
    compile "net.shadowfacts:Forgelin:${project.forgelin_version}"

    if (file("ci-lib/tesla-core-lib-${project.teslacorelib_mc_version}-${project.teslacorelib_version}-deobf.jar").exists()) {
        compile files("ci-lib/tesla-core-lib-${project.teslacorelib_mc_version}-${project.teslacorelib_version}-deobf.jar")
    }
    else if (file("Tesla-Core-Lib/build.gradle").exists()) {
        compile project(':Tesla-Core-Lib')
    }
    else {
        compile("net.ndrei:tesla-core-lib:${project.teslacorelib_mc_version}-${project.teslacorelib_version}:deobf") { changing = true }
    }

    if (file("ci-lib/bush-master-core-${project.minecraft_version}-${project.bushmaster_version}-deobf.jar").exists()) {
        compile files("ci-lib/bush-master-core-${project.minecraft_version}-${project.bushmaster_version}-deobf.jar")
    }
    else if (file("Bush-Master-Core/build.gradle").exists()) {
        compile project(path: ':Bush-Master-Core')
    }
    else {
        compile("net.ndrei:bush-master-core:${project.minecraft_version}-${project.bushmaster_version}:deobf") { changing = true }
    }

    deobfCompile "mezz.jei:jei_${project.minecraft_version}:${project.jei_version}:api"
    runtime "mezz.jei:jei_${project.minecraft_version}:${project.jei_version}"

    compileOnly "CraftTweaker2:CraftTweaker2-API:${project.ct_version}"
    runtime "CraftTweaker2:CraftTweaker2-MC1120-Main:${project.ct_mc_version}-${project.ct_version}"
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include '**/*.info'
        include '**/*.properties'

        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.info'
        exclude '**/*.properties'
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

artifacts {
    archives sourceJar, deobfJar
}

if (System.getProperty("runClient.jvmArgs") != null) {
    runClient.jvmArgs System.getProperty("runClient.jvmArgs").split(" ")
}

if (System.getProperty("runServer.jvmArgs") != null) {
    runServer.jvmArgs System.getProperty("runServer.jvmArgs").split(" ")
}

if (project.hasProperty('mavenFTPServer') && project.hasProperty('mavenFTPUser') && project.hasProperty('mavenFTPPassword')) {
    uploadArchives {
        repositories.mavenDeployer {
            dependsOn build, deobfJar, sourcesJar
            configuration = configurations.deployerJars
            repository(url: project.mavenFTPServer) {
                authentication(userName: project.mavenFTPUser, password: mavenFTPPassword)
            }
        }
    }
    uploadArchives.dependsOn build, sourcesJar, deobfJar
}
